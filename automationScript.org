#+TITLE: Automation Script

* setup
make sure to change the  $HOME/something/something/.... to where you want it to put the files
#+NAME: buildPath
#+begin_src bash
echo "$HOME/git/projects/customOS/live-ubuntu-from-scratch/"
#echo "/media/erik/customos/ufs/"
#+end_src

#+RESULTS: buildPath
: /home/erik/git/projects/customOS/live-ubuntu-from-scratch/




* debootstrap step

:eval never
#+begin_src elisp :noweb yes
 (+tmux/run
"sudo debootstrap \
   --arch=amd64 \
   --variant=minbase \
   focal \
   <<buildPath()>>chroot \
   http://us.archive.ubuntu.com/ubuntu/
   ")
#+end_src

#+RESULTS:



:eval never
#+begin_src elisp :noweb yes
(+tmux/run "sudo mount --bind /dev <<buildPath()>>chroot/dev;sudo mount --bind /run <<buildPath()>>chroot/run")
#+end_src


#+begin_src elisp :noweb yes
(+tmux/run "clear")
#+end_src

#+RESULTS:

#+begin_src elisp :noweb yes
(+tmux/run "sudo chroot <<buildPath()>>chroot")
#+end_src

#+RESULTS:


* in chroot env


- this is inside of a new terminal, the one were you ran the last command

#+begin_src bash :eval never

mount none -t proc /proc
mount none -t sysfs /sys
mount none -t devpts /dev/pts
export HOME=/root
export LC_ALL=C

#+end_src

#+begin_src bash
dmenu -p "custom hostname"|xclip
#+end_src
echo "ubuntu-fs-live" > /etc/hostname

#+RESULTS:


* packages and realated configuration


#+begin_src elisp
(+tmux/run "
cat <<EOF > /etc/apt/sources.list
# main
deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal main restricted universe multiverse

# security
deb http://us.archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-security main restricted universe multiverse

# uppdates
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted universe multiverse
EOF

cat /etc/apt/sources.list
")

#+end_src

#+RESULTS:

* update package-source list

#+begin_src elisp

(+tmux/run "
apt-get update")
#+end_src

#+RESULTS:


** systemd

#+BEGIN_QUOTE
systemd is a system and service manager for Linux. It provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, maintains mount and automount points and implements an elaborate transactional dependency-based service control logic.
#+END_QUOTE

#+begin_src bash :eval never
apt-get install -y libterm-readline-gnu-perl systemd-sysv
#+end_src

* optional packages
#+begin_src bash :eval never
apt-get install -y neovim
#+end_src

* Configure machine-id and divert
#+begin_quote
The /etc/machine-id file contains the unique machine ID of the local system that is set during installation or boot. The machine ID is a single newline-terminated, hexadecimal, 32-character, lowercase ID. When decoded from hexadecimal, this corresponds to a 16-byte/128-bit value. This ID may not be all zeros.
#+end_quote

#+begin_src bash :eval never
dbus-uuidgen > /etc/machine-id
ln -fs /etc/machine-id /var/lib/dbus/machine-id
#+end_src




#+begin_quote
dpkg-divert is the utility used to set up and update the list of diversions.
#+end_quote

#+begin_src bash :eval never
dpkg-divert --local --rename --add /sbin/initctl
ln -s /bin/true /sbin/initctl
#+end_src









** Upgrade packages
#+begin_src bash
apt-get -y upgrade
#+end_src


** Install packages needed for Live System

#+begin_src bash
apt-get install -y \
	sudo \
	casper \
	lupin-casper \
	discover \
	laptop-detect \
	os-prober \
	network-manager \
	resolvconf \
	net-tools \
	wireless-tools \
	locales \
	grub-common \
	grub-gfxpayload-lists \
	grub-pc \
	grub-pc-bin \
	grub2-common
#+end_src

#+begin_src bash
apt-get install -y --no-install-recommends linux-generic ubuntu-standard cmst
#+end_src




* installer
this installs, among others , the kde frontend for the installer,
I have changed this from the gtk frontend because i prefer kde based systems

#+begin_src bash
apt-get install -y \
   ubiquity \
   ubiquity-casper \
   ubiquity-frontend-kde \
   ubiquity-slideshow-ubuntu \
   ubiquity-ubuntu-artwork
#+end_src


#+begin_src bash
apt-get install -y \
	clamav-daemon \
	kitty \
	apt-transport-https \
	curl \
	nano \
	less \
	aptitude \
	xterm \
	fzf fzy

#+end_src


* install pacstall-develop
# Pacstall (develop branch installer)

#+begin_src elisp
(+tmux/run "curl -fsSL https://git.io/Jue3Z | bash")
#+end_src

#+RESULTS:

#+begin_src elisp
(+tmux/run "aptitude install git");;install git
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :results none
(+tmux/run "pacstall -I git");;reinstall git with superior package-manager(compile git)
#+end_src
#+begin_src emacs-lisp :results none
(+tmux/run "pacstall -I pacget-git");;install my personal TUI frontend for pacstall
#+end_src
#+begin_src emacs-lisp :results none
(+tmux/run "pacstall -I neovim-git");;install emacs-git
#+end_src
#+begin_src emacs-lisp :results none
(+tmux/run "pacstall -I emacs-git");;install emacs-git
#+end_src
not installing yet
#+begin_src emacs-lisp :results none
(+tmux/run "aptitude install yadm")
#+end_src
#+begin_src emacs-lisp :results none
(+tmux/run "pacstall -I awesome-git");;install awesome-git
#+end_src

awesome-git
dmenu-distrotube
st-distrotube
emacs-git
git
pacget-git



#+RESULTS:


#+begin_src emacs-lisp :results none
(+tmux/run "pacget ")
#+end_src


#+begin_src emacs-lisp :results none
(+tmux/run "printf \"\n%s\" \"https://gitlab.com/Erik.Lundstedt/pacstall-programs-erik-lundstedt/raw/master/\" >> /usr/share/pacstall/repo/pacstallrepo.txt")
(+tmux/run "cat /usr/share/pacstall/repo/pacstallrepo.txt")
#+end_src









.
